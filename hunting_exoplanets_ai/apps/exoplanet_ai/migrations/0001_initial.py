# Generated by Django 5.2.7 on 2025-10-04 22:21

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('algorithm', models.CharField(choices=[('RANDOM_FOREST', 'Random Forest'), ('SVM', 'Support Vector Machine'), ('NEURAL_NETWORK', 'Neural Network'), ('GRADIENT_BOOSTING', 'Gradient Boosting'), ('LOGISTIC_REGRESSION', 'Logistic Regression')], max_length=50)),
                ('accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('f1_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('training_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('test_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('features_used', models.JSONField(help_text='Lista de características utilizadas para el entrenamiento')),
                ('hyperparameters', models.JSONField(blank=True, help_text='Hiperparámetros del modelo', null=True)),
                ('model_file_path', models.CharField(help_text='Ruta al archivo del modelo serializado', max_length=500)),
                ('scaler_file_path', models.CharField(blank=True, help_text='Ruta al archivo del scaler utilizado', max_length=500, null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Indica si este es el modelo activo para predicciones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'ML Model',
                'verbose_name_plural': 'ML Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExoplanetData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_mission', models.CharField(choices=[('KEPLER', 'Kepler Objects of Interest'), ('K2', 'K2 Planets and Candidates'), ('TESS', 'TESS Project Candidates')], help_text='Misión NASA de origen de los datos', max_length=20)),
                ('object_id', models.CharField(help_text='ID único del objeto (kepid, epic_id, tic_id, etc.)', max_length=50)),
                ('object_name', models.CharField(blank=True, help_text='Nombre del objeto (KOI, EPIC, TOI, etc.)', max_length=100, null=True)),
                ('planet_name', models.CharField(blank=True, help_text='Nombre del planeta confirmado (ej: Kepler-452b)', max_length=100, null=True)),
                ('orbital_period', models.FloatField(help_text='Período orbital en días', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('orbital_period_err', models.FloatField(blank=True, help_text='Error del período orbital', null=True)),
                ('transit_duration', models.FloatField(help_text='Duración del tránsito en horas', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('transit_duration_err', models.FloatField(blank=True, help_text='Error de la duración del tránsito', null=True)),
                ('planetary_radius', models.FloatField(help_text='Radio planetario en radios terrestres', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('planetary_radius_err', models.FloatField(blank=True, help_text='Error del radio planetario', null=True)),
                ('transit_epoch', models.FloatField(blank=True, help_text='Época de tránsito (BJD - 2454833)', null=True)),
                ('transit_depth', models.FloatField(blank=True, help_text='Profundidad del tránsito en ppm', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('impact_parameter', models.FloatField(blank=True, help_text='Parámetro de impacto (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('equilibrium_temperature', models.FloatField(blank=True, help_text='Temperatura de equilibrio en Kelvin', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('original_disposition', models.CharField(choices=[('CONFIRMED', 'Confirmed Exoplanet'), ('CANDIDATE', 'Planet Candidate'), ('FALSE_POSITIVE', 'False Positive'), ('NOT_TRANSIT', 'Not Transit-Like'), ('STELLAR_ECLIPSE', 'Stellar Eclipse'), ('CENTROID_OFFSET', 'Centroid Offset'), ('EPHEMERIS_MATCH', 'Ephemeris Match'), ('UNKNOWN', 'Unknown/Unclassified')], help_text='Clasificación original de astrónomos NASA (ground truth)', max_length=20)),
                ('ml_prediction', models.CharField(blank=True, choices=[('CONFIRMED', 'Confirmed Exoplanet'), ('CANDIDATE', 'Planet Candidate'), ('FALSE_POSITIVE', 'False Positive'), ('NOT_TRANSIT', 'Not Transit-Like'), ('STELLAR_ECLIPSE', 'Stellar Eclipse'), ('CENTROID_OFFSET', 'Centroid Offset'), ('EPHEMERIS_MATCH', 'Ephemeris Match'), ('UNKNOWN', 'Unknown/Unclassified')], help_text='Predicción del modelo de Machine Learning', max_length=20, null=True)),
                ('ml_confidence', models.FloatField(blank=True, help_text='Confianza de la predicción ML (0.0-1.0)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('disposition_score', models.FloatField(blank=True, help_text='Puntuación de disposición original', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('stellar_temperature', models.FloatField(blank=True, help_text='Temperatura estelar efectiva en Kelvin', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('stellar_radius', models.FloatField(blank=True, help_text='Radio estelar en radios solares', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('stellar_mass', models.FloatField(blank=True, help_text='Masa estelar en masas solares', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_source_file', models.CharField(blank=True, help_text='Archivo fuente de los datos', max_length=255, null=True)),
                ('notes', models.TextField(blank=True, help_text='Notas adicionales sobre el objeto', null=True)),
            ],
            options={
                'verbose_name': 'Exoplanet Data',
                'verbose_name_plural': 'Exoplanet Data',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['source_mission'], name='exoplanet_a_source__e987ca_idx'), models.Index(fields=['original_disposition'], name='exoplanet_a_origina_3724e8_idx'), models.Index(fields=['ml_prediction'], name='exoplanet_a_ml_pred_5f8a6b_idx'), models.Index(fields=['object_id'], name='exoplanet_a_object__84e326_idx')],
                'unique_together': {('source_mission', 'object_id')},
            },
        ),
    ]
